<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Planning View</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Wed Dec 17 2014 10:54:36 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Dec 17 2014 10:54:36 GMT-0800 (PST)";
        var CHECKSUM = 2998964254;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.data.ArtifactTree',{
    extend: 'Ext.data.TreeStore',
    logger: new Rally.technicalservices.Logger(),
    inputData: null,
    constructor: function(config) {
        config = Ext.apply({}, config);
        this.inputData = []; 
    },
    build: function(){
        this.logger.log('Rally.technicalservices.data.ArtifactTree.build', this.inputData);
    }
});
Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    CHUNK_SIZE: 10,
    items: [
        {xtype:'container',itemId:'criteria_box', layout: {type: 'hbox'}, padding: 10},
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    portfolioItemType: 'PortfolioItem/Feature',
    portfolioItemFilterField: 'c_FeatureType',
    portfolioItemTypeFetchFields: ['ObjectID','FormattedID','Name'],
    userStoryFetchFields: ['ObjectID','FormattedID','Name','PlanEstimate','Iteration','Name','StartDate','EndDate'],
    
    launch: function() {

        this.cbRelease = this.down('#criteria_box').add({
            xtype:'rallyreleasecombobox',
            fieldLabel: 'Release',
            labelAlign: 'right',
            width: 350,
            storeConfig: {
                context: {projectScopeDown: false}
            },
            margin: 10
        }); 
        
        var ff_label = this.portfolioItemFilterField.replace(/^c_/,"");
        this.cbFeatureFilter = this.down('#criteria_box').add({
            xtype: 'rallyfieldvaluecombobox',
            model: this.portfolioItemType,
            field: this.portfolioItemFilterField,
            fieldLabel: ff_label,
            labelAlign: 'right',
            forceSelection: false,
            allowNoEntry: true,
            margin: 10
        });
        
        this.down('#criteria_box').add({
            xtype: 'rallybutton',
            text: 'Apply',
            scope: this,
            handler: this._run,
            margin: 10
        });
    },
    _run: function(){
        var release_filter = this.cbRelease.getQueryFromSelected();
        var feature_filter = this.cbFeatureFilter.getValue();
        this.logger.log('_run: release_filter', release_filter.toString(), 'feature_filter', feature_filter);
        
        var treeStore = Ext.create('Rally.technicalservices.data.ArtifactTree',{});
        this._fetchPortfolioItems(release_filter, feature_filter).then({
            scope: this,
            success: function(pi_data){
                this.logger.log('fetchPortfolioItems success', pi_data);
                treeStore.inputData[0] = pi_data;
                this._fetchUserStories(pi_data).then({
                    scope: this,
                    success: function(user_story_data){
                        this.logger.log('fetchUserStories success', user_story_data);
                        treeStore.inputData[1] = user_story_data;  
                        treeStore.build();
                    },
                    failure: function(error){
                        this.logger.log('_fetchUserStories return error',error);
                    }
                });
            },
            failure: function(error){
                this.logger.log('_fetchPortfolioItems return error',error);
            }
        });
    },
    _fetchPortfolioItems: function(release_filter, feature_filter){
        var deferred = Ext.create('Deft.Deferred');

        var filters = release_filter;  
        if (feature_filter){
            filters = filters.and(Ext.create('Rally.data.wsapi.Filter',{
                property: this.portfolioItemFilterField,
                value: feature_filter
            }));
        }
        this.logger.log('_fetchPortfolioItems',filters.toString());
        this._createWsapiStore(this.portfolioItemType, this.portfolioItemTypeFetchFields, filters).then({
            scope: this,
            success: function(data){
                deferred.resolve(data);
            },
            failure: function(error){
                this.logger.log('_fetchPortfolioItems _createStore failed', error);
            }
        });

        return deferred;  
    },
    _getPortfolioItemFieldName: function(){
        return 'Feature';
    },
    _fetchUserStories: function(portfolio_items_data){
        this.logger.log('_fetchUserStories', portfolio_items_data);
        var deferred = Ext.create('Deft.Deferred');
        
        var pi_ancestor_field_name = this._getPortfolioItemFieldName() + '.ObjectID';
        var filters = []; 
        var idx = -1;
        var counter = 0;
        Ext.each(portfolio_items_data, function(pi){
            var filter = Ext.create('Rally.data.wsapi.Filter',{
                property: pi_ancestor_field_name,
                value: pi.get('ObjectID')
            });
            if (counter % this.CHUNK_SIZE == 0){
                if (idx >= 0) {this.logger.log('_fetchUserStories: filter', filters[idx].toString())};
                idx++;
                filters[idx] = filter;  
            } else {
                filters[idx] = filters[idx].or(filter);
            }
            counter++;
        },this);
        
        var promises = [];
        Ext.each(filters, function(f){
            promises.push(this._createWsapiStore('HierarchicalRequirement',this.userStoryFetchFields, f));
        },this);
        
        Deft.Promise.all(promises).then({
            scope:this,
            success: function(data){
                var user_story_data = _.flatten(data);
                this.logger.log('_fetchUserStories Promise complete:',data, user_story_data.length);
                deferred.resolve(user_story_data);
            },
            failure: function(error){
                this.logger.log('_fetchUserStories Promise failed', error);
            }
        });
        return deferred;
    },
    _createWsapiStore: function(model, fetch, filter){
        this.logger.log('_createWsapiStore',model, fetch,filter.toString());
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: fetch,
            autoLoad: true,
            filters: filter,
            limit: 'Infinity',
            listeners: {
                scope: this,
                load: function(store,data,success){
                    this.logger.log('_createWsapiStore: Store loaded',store,success);
                    if (success){
                        deferred.resolve(data);
                    } else {
                        deferred.reject('Store failed to load.', model, fetch, filter.toString());
                    }
                }
            }
        });
        return deferred;
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'Portfolio Planning View'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>